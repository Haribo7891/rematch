"use strict";(self.webpackChunkrematch_docs=self.webpackChunkrematch_docs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","collapsed":true,"collapsible":true,"label":"Rematch","items":[{"type":"link","label":"Introduction","href":"/docs/","docId":"introduction"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Getting Started","items":[{"type":"link","label":"Installation","href":"/docs/getting-started/installation","docId":"installation"},{"type":"link","label":"TypeScript","href":"/docs/getting-started/typescript","docId":"typescript"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"API Reference","items":[{"type":"link","label":"Introduction","href":"/docs/api-reference/","docId":"api-reference/index"},{"type":"link","label":"Models","href":"/docs/api-reference/models","docId":"api-reference/models"},{"type":"link","label":"Redux","href":"/docs/api-reference/redux","docId":"api-reference/redux"},{"type":"link","label":"Store","href":"/docs/api-reference/store","docId":"api-reference/store"},{"type":"link","label":"Plugins","href":"/docs/api-reference/plugins","docId":"api-reference/plugins"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Plugins","items":[{"type":"link","label":"Introduction","href":"/docs/plugins/","docId":"plugins/index"},{"type":"link","label":"@rematch/immer","href":"/docs/plugins/immer/","docId":"plugins/immer"},{"type":"link","label":"@rematch/select","href":"/docs/plugins/select/","docId":"plugins/select"},{"type":"link","label":"@rematch/loading","href":"/docs/plugins/loading/","docId":"plugins/loading"},{"type":"link","label":"@rematch/updated","href":"/docs/plugins/updated/","docId":"plugins/updated"},{"type":"link","label":"@rematch/persist","href":"/docs/plugins/persist/","docId":"plugins/persist"},{"type":"link","label":"@rematch/typed-state","href":"/docs/plugins/typed-state/","docId":"plugins/typed-state"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Recipes","items":[{"type":"link","label":"Redux Devtools","href":"/docs/recipes/redux-devtools/","docId":"recipes/redux-devtools"},{"type":"link","label":"Testing","href":"/docs/recipes/testing/","docId":"recipes/testing"},{"type":"link","label":"Redux Plugins","href":"/docs/recipes/redux-plugins/","docId":"recipes/redux-plugins"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Migrating","items":[{"type":"link","label":"From Redux to Rematch","href":"/docs/migrating-from-redux-to-rematch","docId":"migrating/from-redux"},{"type":"link","label":"From v1 to v2","href":"/docs/migrating-v1-to-v2","docId":"migrating/from-v1-to-v2"}]}]},"docs":{"api-reference/index":{"id":"api-reference/index","title":"Rematch API Reference","description":"The API exposed by Rematch is very simple and it is based around the init method. It creates and returns a Rematch store, which is essentially a Redux store with a few additional properties and extra features.","sidebar":"docs"},"api-reference/models":{"id":"api-reference/models","title":"Models","description":"Models are crucial parts of your store. They allow you to define your initial state, reducers and effects. You can provide them to the Rematch init method as config.models property.","sidebar":"docs"},"api-reference/plugins":{"id":"api-reference/plugins","title":"Plugins","description":"Plugins provide the possibility to extend Rematch functionality. They can overwrite configuration, add new models or even replace the whole store. To get the idea how to build plugins, you can visit plugins section and refer to the source code of each plugin built by the Rematch team.","sidebar":"docs"},"api-reference/redux":{"id":"api-reference/redux","title":"Redux","description":"It is possible to customize Redux configuration provided by Rematch. To do that, provide your own configuration to the Rematch init method as config.redux property.","sidebar":"docs"},"api-reference/store":{"id":"api-reference/store","title":"Store","description":"Store returned by Rematch is essentially a Redux store with a few additional properties and extra features. Therefore, for more in-depth reference of the functions \'provided by Redux\', refer to the Redux documentation.","sidebar":"docs"},"installation":{"id":"installation","title":"Installation","description":"Installation is as simple as running the npm command:","sidebar":"docs"},"introduction":{"id":"introduction","title":"Introduction","description":"Rematch is Redux best practices without the boilerplate. No more action types, action creators, switch statements or thunks.","sidebar":"docs"},"migrating/from-redux":{"id":"migrating/from-redux","title":"From Redux to Rematch","description":"Moving from Redux to Rematch involves very few steps.","sidebar":"docs"},"migrating/from-v1-to-v2":{"id":"migrating/from-v1-to-v2","title":"From v1 to v2","description":"Breaking changes for:","sidebar":"docs"},"plugins/immer":{"id":"plugins/immer","title":"Immer","description":"Immer plugin for Rematch. Wraps your reducers with immer, providing ability to safely do mutable changes resulting in immutable state.","sidebar":"docs"},"plugins/index":{"id":"plugins/index","title":"Introduction","description":"Plugins extend Rematch functionality. They are optional but very helpful. Below you can find a summary of plugins created by the Rematch team. You can also try searching in npm/github for plugins created by the community or create plugins yourself.","sidebar":"docs"},"plugins/loading":{"id":"plugins/loading","title":"Loading","description":"The loading plugin for Rematch. Adds automated loading indicators for effects, so you don\'t need to manage state like loading: true by yourself. Inspired by dva-loading.","sidebar":"docs"},"plugins/persist":{"id":"plugins/persist","title":"Persist","description":"Redux-Persist v6 plugin for Rematch. Provides automatic Redux state persistence.","sidebar":"docs"},"plugins/select":{"id":"plugins/select","title":"Select","description":"A plugin to add memoized state selection to Rematch. Selectors are created using Reselect by default and are automatically wired with selector dependencies from other models.","sidebar":"docs"},"plugins/typed-state":{"id":"plugins/typed-state","title":"Typed State","description":"Rematch plugin for type-checking state at runtime. Uses prop-types for describing expected type shape.","sidebar":"docs"},"plugins/updated":{"id":"plugins/updated","title":"Updated","description":"Rematch plugin for maintaining timestamps when an effect is triggered.","sidebar":"docs"},"recipes/redux-devtools":{"id":"recipes/redux-devtools","title":"Redux Devtools","description":"Rematch works with Redux Devtools out of the box. No configuration required.","sidebar":"docs"},"recipes/redux-plugins":{"id":"recipes/redux-plugins","title":"Redux Plugins","description":"Adding existing Redux Libraries to your Store","sidebar":"docs"},"recipes/testing":{"id":"recipes/testing","title":"Testing","description":"Rematch testing works out of the box with many libraries like Jest, Mocha, Ava, and of course works fine with end to end tests like Cypress or Testing Library.","sidebar":"docs"},"typescript":{"id":"typescript","title":"TypeScript","description":"Rematch handles TypeScript inference practically out of the box, we have all our codebase with TypeScript (latest version) and we do continuous testing to our TypeScript examples.","sidebar":"docs"}}}')}}]);